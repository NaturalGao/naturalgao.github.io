<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>NaturalGao</title>
  
  
  <link href="https://naturalgao.github.io/atom.xml" rel="self"/>
  
  <link href="https://naturalgao.github.io/"/>
  <updated>2022-03-05T16:14:06.421Z</updated>
  <id>https://naturalgao.github.io/</id>
  
  <author>
    <name>NaturalGao</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>硬链接与软链接详解</title>
    <link href="https://naturalgao.github.io/2019/12/17/%E7%A1%AC%E9%93%BE%E6%8E%A5%E4%B8%8E%E8%BD%AF%E9%93%BE%E6%8E%A5%E8%AF%A6%E8%A7%A3/"/>
    <id>https://naturalgao.github.io/2019/12/17/%E7%A1%AC%E9%93%BE%E6%8E%A5%E4%B8%8E%E8%BD%AF%E9%93%BE%E6%8E%A5%E8%AF%A6%E8%A7%A3/</id>
    <published>2019-12-17T04:42:52.000Z</published>
    <updated>2022-03-05T16:14:06.421Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>Linux 基础是非常重要得，无论是工作还是我们平时得学习，掌握 Linux 对你的学习道路一定能提供不少帮助。</p><p>下面简单的介绍下 Linux 中的<strong>硬链接</strong>和<strong>软连接</strong>，为了你更好的理解我下面的分享，你需要掌握 Linux 中的 inode 概念，如果你还不知道，推荐你到我的另一篇分享，先了解 inode。<a href="https://naturalgao.github.io/post/9e71d83.html">传送门</a></p><h2 id="硬链接"><a href="#硬链接" class="headerlink" title="硬链接"></a>硬链接</h2><h3 id="什么是硬链接"><a href="#什么是硬链接" class="headerlink" title="什么是硬链接"></a>什么是硬链接</h3><p>Linux 中文件的<strong>inode</strong>号码与文件名一般都是一对一的关系，但是也可以多个一对多（多个文件名指向一个 inode 号码），称为硬链接。</p><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ol><li><p>可以用不同的文件名访问同样的内容</p></li><li><p>对其中一个文件内容修改时，会影响到其他文件的内容。</p></li><li><p>删除其中一个文件时，其他文件可以正常访问，不受影响</p></li></ol><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p><strong>首先,创建一个测试文件一，并写入 “做个哎记录的人”</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim 1.txt</span><br></pre></td></tr></table></figure><p><img src="https://cdn.learnku.com/uploads/images/201912/17/29780/ZCQFmdYpZZ.png!large" alt="Laravel"></p><p>接着创建一个<strong>硬链接</strong></p><p>格式：ln 源文件 目标文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln 1.txt 2.txt</span><br></pre></td></tr></table></figure><p><img src="https://cdn.learnku.com/uploads/images/201912/17/29780/RFDPGN2YBE.png!large" alt="Laravel"></p><p><strong>可以看到执行命令后多了个 2.txt</strong></p><p><strong>我们打开 2.txt 看看~~</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim 2.txt</span><br></pre></td></tr></table></figure><p><img src="https://cdn.learnku.com/uploads/images/201912/17/29780/F2G6ycARnB.png!large" alt="Laravel"></p><p>发现内容跟 1.txt 一样，跟 copy 差不多，但也是有取别：</p><p><strong>硬链接，无论是修改源文件还是目标文件，是会影响其它文件的，而 copy 后的文件修改是不会影响源文件的，而为什么不会影响到呢，无非就是 inode 的问题</strong></p><p>我 copy 2.txt 到 3.txt,</p><p>我们可以通过一下命令来查看区别：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -i</span><br></pre></td></tr></table></figure><p><img src="https://cdn.learnku.com/uploads/images/201912/17/29780/l0TPf6n9Vt.png!large" alt="Laravel"></p><p><strong>从图中可以发现, 1 和 2 的 inode 号码是一样的，所以修改其中一个文件，其余文件内容会随之变化. copy 出来的 3.txt 生成了个新的 inode 号码，所以是不会影响源文件的。所以验证了我们上面那个结论。</strong></p><p>我们再验证一下，修改 inode 号码一样的文件，其它文件是否会随之改变。</p><p>我打开 2.txt 修改里面的内容，看 1.txt 是否有更新</p><p><img src="https://cdn.learnku.com/uploads/images/201912/17/29780/gdtbBPJO5z.png!large" alt="Laravel"></p><p>发现 1.txt 也更新了</p><p><strong>验证了我们的 1,2 条结论。</strong></p><p>那我们把 2.txt 删除试试</p><p><img src="https://cdn.learnku.com/uploads/images/201912/17/29780/wOvjJltdEn.png!large" alt="Laravel"></p><p><strong>发现 1.txt 还在，第三条结论也没有问题。</strong></p><h2 id="软链接"><a href="#软链接" class="headerlink" title="软链接"></a>软链接</h2><p>通过上面的验证，相信大家对 Linux 的<strong>硬链接</strong>，应该掌握得差不多了，那我们接着来讲讲<strong>软连接</strong>，如果你已经掌握了<strong>硬链接</strong>，那<strong>软连接</strong> 很快就能掌握。</p><h3 id="硬链接和软连接区别"><a href="#硬链接和软连接区别" class="headerlink" title="硬链接和软连接区别"></a>硬链接和软连接区别</h3><ol><li><p>硬链接 inode 号码一致，软连接相反。</p></li><li><p>硬链接读的内容是不同文件的内容，软连读的是源文件的内容。</p></li></ol><h3 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h3><p>通过以下命令创建一个<strong>软连接</strong></p><p>命令结构：ln 源文件 目标文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s 1.txt 2.txt</span><br></pre></td></tr></table></figure><p><img src="https://cdn.learnku.com/uploads/images/201912/17/29780/tjz8wvW2sz.png!large" alt="Laravel"></p><p><strong>观察 2.txt 后面，什么意思呢，就是 把 2.txt 路径指向 1.txt 的路径，当我们访问 2.txt 的时候，实际读取的是 1.txt 的内容。</strong></p><p>我们访问 2.txt 看看</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim 2.txt</span><br></pre></td></tr></table></figure><p><img src="https://cdn.learnku.com/uploads/images/201912/17/29780/7rQR3rXp8g.png!large" alt="Laravel"></p><p>内容一致，没问题。怎么验证我们上面说的实际读取的是 1.txt 的内容呢？很好验证，我们把 1.txt 删除了。</p><p><img src="https://cdn.learnku.com/uploads/images/201912/17/29780/uFjuoEgQeF.png!large" alt="Laravel"></p><p>明显看到,删除 1.txt 后 字变红了，为什么呢？很好理解，有错误，文件找不到了嘛，我们把 1.txt 删除了，而 2.txt 还指向 1.txt，一个不存在的文件。</p><p>我们试着访问下 2.txt</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat 2.txt</span><br></pre></td></tr></table></figure><p><img src="https://cdn.learnku.com/uploads/images/201912/17/29780/DGkTmuHA8d.png!large" alt="Laravel"></p><p><strong>发现报了个错误，文件找不到，所以我们的结论没有问题。</strong></p><h2 id="篇尾"><a href="#篇尾" class="headerlink" title="篇尾"></a>篇尾</h2><p>相信到这里你对 Linux 的 inode 、硬链接、软连接已经掌握得差不多了，希望能帮助到在看得你。</p><p><a href="https://naturalgao.github.io/">个人博客</a></p><p><a href="https://naturalgao.github.io/post/b5900575.html">原文</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h2&gt;&lt;p&gt;Linux 基础是非常重要得，无论是工作还是我们平时得学习，掌握 Linux 对你的学习道路一定能提供不少帮助。&lt;/p&gt;
&lt;p&gt;下面简单的介</summary>
      
    
    
    
    
    <category term="Linux" scheme="https://naturalgao.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>你真的对 Linux 中的 Inode 了解吗？</title>
    <link href="https://naturalgao.github.io/2019/12/16/%E4%BD%A0%E7%9C%9F%E7%9A%84%E5%AF%B9-Linux-%E4%B8%AD%E7%9A%84-Inode-%E4%BA%86%E8%A7%A3%E5%90%97%EF%BC%9F/"/>
    <id>https://naturalgao.github.io/2019/12/16/%E4%BD%A0%E7%9C%9F%E7%9A%84%E5%AF%B9-Linux-%E4%B8%AD%E7%9A%84-Inode-%E4%BA%86%E8%A7%A3%E5%90%97%EF%BC%9F/</id>
    <published>2019-12-16T13:44:52.000Z</published>
    <updated>2022-03-05T16:13:42.828Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p><strong>inode 是一个Linux 非常重要的知识点，了解它有利于我们对Linux系统的进一步了解。</strong></p><p><strong>今天无意中看到了阮一峰老师对inode做的一个博客笔记，我这里简单的记录下学到的东西。</strong></p><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>存储单位：</p><ol><li><p>扇区 （Sector），存世512字节（相当于0.5kb）</p></li><li><p>块（block），8个Sector 组成一个 block</p></li></ol><p>文件存储分为两个部分：</p><ol><li><p>数据存储</p></li><li><p>文件元信息</p></li></ol><p>文件元信息就是inode</p><h2 id="inode内容"><a href="#inode内容" class="headerlink" title="inode内容"></a>inode内容</h2><p>inode文件元信息包含以下内容:</p><ol><li><p>文件的字节数</p></li><li><p>文件拥有者的User ID</p></li><li><p>文件的Group ID</p></li><li><p>文件的读、写、执行权限</p></li><li><p>文件的时间戳，共有三个：ctime指inode上一次变动的时间，mtime指文件内容上一次变动的时间，atime指文件上一次打开的时间。</p></li><li><p>链接数，即有多少文件名指向这个inode</p></li><li><p>文件数据block的位置</p></li></ol><h2 id="查看inode信息"><a href="#查看inode信息" class="headerlink" title="查看inode信息"></a>查看inode信息</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stat 1.txt</span><br></pre></td></tr></table></figure><h2 id="查看硬盘的inode总数和已经使用数量"><a href="#查看硬盘的inode总数和已经使用数量" class="headerlink" title="查看硬盘的inode总数和已经使用数量"></a>查看硬盘的inode总数和已经使用数量</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df -i</span><br></pre></td></tr></table></figure><h2 id="inode号码"><a href="#inode号码" class="headerlink" title="inode号码"></a>inode号码</h2><p>每个文件都会有inode号码，相当于mysql 数据库里的表id，用来查找数据的。每个文件名都会对应一个inode号码，我们打开一个文件的时候实际经历了以下步骤：</p><ol><li><p>通过文件名去找对应的inode号码</p></li><li><p>通过inode号码获取inode信息</p></li><li><p>通过inode信息查找数据所在的block，读取数据</p></li></ol><h2 id="查看文件-x2F-目录的inode号码"><a href="#查看文件-x2F-目录的inode号码" class="headerlink" title="查看文件&#x2F;目录的inode号码"></a>查看文件&#x2F;目录的inode号码</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -i 1.txt</span><br></pre></td></tr></table></figure><h2 id="特殊作用"><a href="#特殊作用" class="headerlink" title="特殊作用"></a>特殊作用</h2><p>由于inode号码与文件名分离，这种机制导致了一些Unix&#x2F;Linux系统特有的现象。</p><p>　　1. 有时，文件名包含特殊字符，无法正常删除。这时，直接删除inode节点，就能起到删除文件的作用。</p><p>　　2. 移动文件或重命名文件，只是改变文件名，不影响inode号码。</p><p>　　3. 打开一个文件以后，系统就以inode号码来识别这个文件，不再考虑文件名。因此，通常来说，系统无法从inode号码得知文件名。</p><p>第3点使得软件更新变得简单，可以在不关闭软件的情况下进行更新，不需要重启。因为系统通过inode号码，识别运行中的文件，不通过文件名。更新的时候，新版文件以同样的文件名，生成一个新的inode，不会影响到运行中的文件。等到下一次运行这个软件的时候，文件名就自动指向新版文件，旧版文件的inode则被回收。</p><h2 id="篇尾"><a href="#篇尾" class="headerlink" title="篇尾"></a>篇尾</h2><p>坚持每天学一点，知识是需要日积月累的，加油~ 分享给大家~</p><p><a href="http://www.ruanyifeng.com/blog/2011/12/inode.html">参考</a></p><p><a href="https://naturalgao.github.io/">个人博客</a></p><p><a href="https://naturalgao.github.io/post/9e71d83.html">原文</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;inode 是一个Linux 非常重要的知识点，了解它有利于我们对Linux系统的进一步了解。&lt;/strong&gt;&lt;/p&gt;
&lt;</summary>
      
    
    
    
    
    <category term="Linux" scheme="https://naturalgao.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>PHP实现简单的数据采集</title>
    <link href="https://naturalgao.github.io/2019/12/15/PHP%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%9A%84%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86/"/>
    <id>https://naturalgao.github.io/2019/12/15/PHP%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%9A%84%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86/</id>
    <published>2019-12-14T19:05:09.000Z</published>
    <updated>2022-03-05T16:13:43.069Z</updated>
    
    <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>​        说到数据采集大家首先都会想到python,代码简洁，高效，很容易就可以实现数据采集。</p><p>​        那PHP如何实现数据采集呢？非常简单。</p><h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p>​        那什么是数据采集呢？以下是百度百科的介绍：</p><p>​        <strong>数据采集，又称<a href="https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E8%8E%B7%E5%8F%96">数据获取</a>，是利用一种装置，从系统外部采集数据并输入到系统内部的一个接口。数据采集技术广泛应用在各个领域。</strong></p><blockquote><p>你可以简单的理解为偷别人网站的数据。</p></blockquote><h1 id="需要的扩展包"><a href="#需要的扩展包" class="headerlink" title="需要的扩展包"></a>需要的扩展包</h1><h2 id="1-Guzzle"><a href="#1-Guzzle" class="headerlink" title="1. Guzzle"></a>1. <a href="http://docs.guzzlephp.org/en/stable/index.html">Guzzle</a></h2><blockquote><p>这是一个PHP HTTP客户端，可以轻松发送HTTP请求并轻松与Web服务集成。</p></blockquote><p>安装方式：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer <span class="keyword">require</span> guzzlehttp/guzzle:~<span class="number">6.0</span></span><br></pre></td></tr></table></figure><p>或者：</p><p>在composer.json加入</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;require&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;guzzlehttp/guzzle&quot;</span><span class="punctuation">:</span> <span class="string">&quot;~6.0&quot;</span></span><br><span class="line">   <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="2-QueryList"><a href="#2-QueryList" class="headerlink" title="2. QueryList"></a>2. <a href="https://querylist.cc/docs/guide/v3/overview">QueryList</a></h2><p>​        QueryList是一个基于phpQuery的PHP通用列表采集类,得益于phpQuery，让使用QueryList几乎没有任何学习成本，只要会CSS3选择器就可以轻松使用QueryList了，它让PHP做采集像jQuery选择元素一样简单。 QueryList的几个特点:</p><ol><li>学习简单：只有一个核心的API</li><li>使用简单：用jQuery选择器来选择页面元素</li><li>自带过滤功能，可过滤掉无用的内容</li><li>支持无限层级嵌套采集</li><li>采集结果直接以采集规则以列表的形式有序的返回</li><li>支持扩展</li></ol><blockquote><p>我们可以使用它来过滤html内容</p></blockquote><p>安装方式：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer <span class="keyword">require</span> jaeger/querylist:V3.<span class="number">2.1</span></span><br></pre></td></tr></table></figure><h1 id="采集案例"><a href="#采集案例" class="headerlink" title="采集案例"></a>采集案例</h1><blockquote><p>我们以 <strong>LearnKu</strong> 社区为例，我们将采集社区的帖子信息，并把这些信息存入文件和存入mysql数据库。</p></blockquote><h2 id="1-安装依赖"><a href="#1-安装依赖" class="headerlink" title="1.安装依赖"></a>1.安装依赖</h2><p>在命令行输入以下命令</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer init</span><br></pre></td></tr></table></figure><p>引入依赖</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;require&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;guzzlehttp/guzzle&quot;</span><span class="punctuation">:</span> <span class="string">&quot;~6.0@dev&quot;</span><span class="punctuation">,</span>     </span><br><span class="line">        <span class="attr">&quot;jaeger/querylist&quot;</span><span class="punctuation">:</span> <span class="string">&quot;V3.2.1&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;autoload&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;psr-4&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;App\\&quot;</span><span class="punctuation">:</span> <span class="string">&quot;app/&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>安装依赖</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer install</span><br></pre></td></tr></table></figure><h2 id="2-采集类"><a href="#2-采集类" class="headerlink" title="2.采集类"></a>2.采集类</h2><p>app\Handle\ClientHandle.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">App</span>\<span class="title class_">Handle</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">GuzzleHttp</span>\<span class="title">Client</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">QL</span>\<span class="title">QueryList</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClientHandle</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$client</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;client = <span class="keyword">new</span> <span class="title class_">Client</span>([<span class="string">&#x27;verify&#x27;</span> =&gt; <span class="literal">false</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">queryBody</span>(<span class="params"><span class="variable">$url</span>, <span class="variable">$rules</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$html</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">sendRequest</span>(<span class="variable">$url</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$data</span> = <span class="title class_">QueryList</span>::<span class="title function_ invoke__">Query</span>(<span class="variable">$html</span>, <span class="variable">$rules</span>)-&gt;<span class="title function_ invoke__">getData</span>(<span class="function"><span class="keyword">function</span> (<span class="params"><span class="variable">$item</span></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">array_key_exists</span>(<span class="string">&#x27;link&#x27;</span>,<span class="variable">$item</span>))&#123;</span><br><span class="line">                <span class="variable">$content</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">sendRequest</span>(<span class="variable">$item</span>[<span class="string">&#x27;link&#x27;</span>]);</span><br><span class="line">                <span class="variable">$item</span>[<span class="string">&#x27;post&#x27;</span>] = <span class="title class_">QueryList</span>::<span class="title function_ invoke__">Query</span>(<span class="variable">$content</span>, [</span><br><span class="line">                    <span class="string">&#x27;title&#x27;</span> =&gt; [<span class="string">&#x27;div.pull-left&gt;span&#x27;</span>, <span class="string">&#x27;text&#x27;</span>],</span><br><span class="line">                    <span class="string">&#x27;review&#x27;</span> =&gt; [<span class="string">&#x27;p&gt;span.text-mute:eq(0)&#x27;</span>, <span class="string">&#x27;text&#x27;</span>],</span><br><span class="line">                    <span class="string">&#x27;comment&#x27;</span> =&gt; [<span class="string">&#x27;p&gt;span.text-mute:eq(1)&#x27;</span>, <span class="string">&#x27;text&#x27;</span>],</span><br><span class="line">                    <span class="string">&#x27;content&#x27;</span> =&gt; [<span class="string">&#x27;div.content-body&#x27;</span>, <span class="string">&#x27;html&#x27;</span>],</span><br><span class="line">                    <span class="string">&#x27;created_at&#x27;</span> =&gt; [<span class="string">&#x27;p&gt;a&gt;span&#x27;</span>, <span class="string">&#x27;title&#x27;</span>],</span><br><span class="line">                    <span class="string">&#x27;updated_at&#x27;</span> =&gt; [<span class="string">&#x27;p&gt;a:eq(2)&#x27;</span>, <span class="string">&#x27;data-tooltip&#x27;</span>]</span><br><span class="line">                ])-&gt;data[<span class="number">0</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$item</span>;</span><br><span class="line">        &#125;);</span><br><span class="line"><span class="comment">//查看采集结果</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$data</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">sendRequest</span>(<span class="params"><span class="variable">$url</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$response</span> = <span class="variable language_">$this</span>-&gt;client-&gt;<span class="title function_ invoke__">request</span>(<span class="string">&#x27;GET&#x27;</span>, <span class="variable">$url</span>, [</span><br><span class="line">            <span class="string">&#x27;headers&#x27;</span> =&gt; [</span><br><span class="line">                <span class="string">&#x27;User-Agent&#x27;</span> =&gt; <span class="string">&#x27;testing/1.0&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;Accept&#x27;</span> =&gt; <span class="string">&#x27;application/json&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;X-Foo&#x27;</span> =&gt; [<span class="string">&#x27;Bar&#x27;</span>, <span class="string">&#x27;Baz&#x27;</span>]</span><br><span class="line">            ],</span><br><span class="line">            <span class="string">&#x27;form_params&#x27;</span> =&gt; [</span><br><span class="line">                <span class="string">&#x27;foo&#x27;</span> =&gt; <span class="string">&#x27;bar&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;baz&#x27;</span> =&gt; [<span class="string">&#x27;hi&#x27;</span>, <span class="string">&#x27;there!&#x27;</span>]</span><br><span class="line">            ],</span><br><span class="line">            <span class="string">&#x27;timeout&#x27;</span> =&gt; <span class="number">3.14</span>,</span><br><span class="line">        ]);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$body</span> = <span class="variable">$response</span>-&gt;<span class="title function_ invoke__">getBody</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取到页面源码</span></span><br><span class="line">        <span class="variable">$html</span> = (<span class="keyword">string</span>)<span class="variable">$body</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$html</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简单分析：</p><ol><li><p>__construct 构造函数中我们实例化了一个 guzzleClient，用来发起http请求的。</p></li><li><p>sendRequest 是传入url，然后发起一个http请求并返回目标的html源码。</p></li><li><p>queryBody,接收一个url，和需要采集的规则，这里不做延伸 <a href="https://querylist.cc/docs/guide/v3/start">queryList</a>，只要会使用jquery，那相信你很快上手。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">queryBody</span>(<span class="params"><span class="variable">$url</span>, <span class="variable">$rules</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">      <span class="comment">//发起一个请求，接收html源码</span></span><br><span class="line">        <span class="variable">$html</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">sendRequest</span>(<span class="variable">$url</span>);</span><br><span class="line">      <span class="comment">//将内容$html，和规则$rules 传给QueryList的静态方法Query处理，并获取数据。</span></span><br><span class="line">        <span class="variable">$data</span> = <span class="title class_">QueryList</span>::<span class="title function_ invoke__">Query</span>(<span class="variable">$html</span>, <span class="variable">$rules</span>)-&gt;<span class="title function_ invoke__">getData</span>(<span class="function"><span class="keyword">function</span> (<span class="params"><span class="variable">$item</span></span>) </span>&#123;</span><br><span class="line">          <span class="comment">//我首先获取的是列表页，然后通过列表的link链接再去获取文章的详细信息。</span></span><br><span class="line">          </span><br><span class="line">          <span class="comment">//判断是否匹配到link</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">array_key_exists</span>(<span class="string">&#x27;link&#x27;</span>,<span class="variable">$item</span>))&#123;</span><br><span class="line">              <span class="comment">//获取详情页的html源码</span></span><br><span class="line">                <span class="variable">$content</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">sendRequest</span>(<span class="variable">$item</span>[<span class="string">&#x27;link&#x27;</span>]);</span><br><span class="line">              <span class="comment">//再交给QueryList 处理数据</span></span><br><span class="line">                <span class="variable">$item</span>[<span class="string">&#x27;post&#x27;</span>] = <span class="title class_">QueryList</span>::<span class="title function_ invoke__">Query</span>(<span class="variable">$content</span>, [</span><br><span class="line">                    <span class="string">&#x27;title&#x27;</span> =&gt; [<span class="string">&#x27;div.pull-left&gt;span&#x27;</span>, <span class="string">&#x27;text&#x27;</span>],</span><br><span class="line">                    <span class="string">&#x27;review&#x27;</span> =&gt; [<span class="string">&#x27;p&gt;span.text-mute:eq(0)&#x27;</span>, <span class="string">&#x27;text&#x27;</span>],</span><br><span class="line">                    <span class="string">&#x27;comment&#x27;</span> =&gt; [<span class="string">&#x27;p&gt;span.text-mute:eq(1)&#x27;</span>, <span class="string">&#x27;text&#x27;</span>],</span><br><span class="line">                    <span class="string">&#x27;content&#x27;</span> =&gt; [<span class="string">&#x27;div.content-body&#x27;</span>, <span class="string">&#x27;html&#x27;</span>],</span><br><span class="line">                    <span class="string">&#x27;created_at&#x27;</span> =&gt; [<span class="string">&#x27;p&gt;a&gt;span&#x27;</span>, <span class="string">&#x27;title&#x27;</span>],</span><br><span class="line">                    <span class="string">&#x27;updated_at&#x27;</span> =&gt; [<span class="string">&#x27;p&gt;a:eq(2)&#x27;</span>, <span class="string">&#x27;data-tooltip&#x27;</span>]</span><br><span class="line">                ])-&gt;data[<span class="number">0</span>];</span><br><span class="line">              <span class="comment">//采集到的是一个集合，所以我只取第一个 data[0]</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$item</span>;</span><br><span class="line">        &#125;);</span><br><span class="line"><span class="comment">//查看采集结果</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$data</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="3-PDO类"><a href="#3-PDO类" class="headerlink" title="3. PDO类"></a>3. PDO类</h2><p>App\Handle\PdoHandle.php</p><blockquote><p>我们使用PDO来操作数据库,这里我简单实现一个类</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">App</span>\<span class="title class_">Handle</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PdoHandle</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$source</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$driver</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$host</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$dbname</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$username</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$password</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * PdoHandle constructor.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$driver</span> = <span class="string">&#x27;mysql&#x27;</span>, <span class="variable">$host</span> = <span class="string">&#x27;localhost&#x27;</span>, <span class="variable">$dbname</span> = <span class="string">&#x27;caiji&#x27;</span>, <span class="variable">$username</span> = <span class="string">&#x27;root&#x27;</span>, <span class="variable">$password</span> = <span class="string">&#x27;&#x27;</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;driver = <span class="variable">$driver</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;host = <span class="variable">$host</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;dbname = <span class="variable">$dbname</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;username = <span class="variable">$username</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;password = <span class="variable">$password</span>;</span><br><span class="line">        <span class="variable">$dsn</span> = <span class="variable language_">$this</span>-&gt;driver . <span class="string">&#x27;:host=&#x27;</span> . <span class="variable language_">$this</span>-&gt;host . <span class="string">&#x27;;dbname=&#x27;</span> . <span class="variable language_">$this</span>-&gt;dbname;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;source = <span class="keyword">new</span> <span class="title class_">\PDO</span>(<span class="variable">$dsn</span>, <span class="variable language_">$this</span>-&gt;username, <span class="variable language_">$this</span>-&gt;password);</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;source-&gt;<span class="title function_ invoke__">setAttribute</span>(\<span class="title class_">PDO</span>::ATTR_ERRMODE, \<span class="title class_">PDO</span>::ERRMODE_EXCEPTION);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>相信都看得懂，就不介绍了</p><h2 id="4-写入文件"><a href="#4-写入文件" class="headerlink" title="4. 写入文件"></a>4. 写入文件</h2><p>我们把采集到的内容，写入到文件里</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//设置请求时间无限制</span></span><br><span class="line"><span class="title function_ invoke__">set_time_limit</span>(<span class="number">0</span>);</span><br><span class="line"><span class="comment">//引入自动加载</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">&#x27;../vendor/autoload.php&#x27;</span>;</span><br><span class="line"><span class="comment">//规则， 只取下标小于5的  也就是前5条数据</span></span><br><span class="line"><span class="variable">$rules</span> = [</span><br><span class="line">    <span class="string">&#x27;title&#x27;</span> =&gt; [<span class="string">&#x27;span.topic-title:lt(5)&#x27;</span>, <span class="string">&#x27;text&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;link&#x27;</span> =&gt; [<span class="string">&#x27;a.topic-title-wrap:lt(5)&#x27;</span>, <span class="string">&#x27;href&#x27;</span>]</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">//采集</span></span><br><span class="line"><span class="variable">$url</span> = <span class="string">&quot;https://learnku.com/laravel&quot;</span>;</span><br><span class="line"><span class="variable">$client</span> = <span class="keyword">new</span> \App\Handle\<span class="title function_ invoke__">ClientHandle</span>();</span><br><span class="line"><span class="variable">$data</span> = <span class="variable">$client</span>-&gt;<span class="title function_ invoke__">queryBody</span>(<span class="variable">$url</span>, <span class="variable">$rules</span>);</span><br><span class="line"><span class="comment">//因为我们请求了两级，所以返回的数组需要处理成一级数组</span></span><br><span class="line"><span class="variable">$data</span> = <span class="title function_ invoke__">array_map</span>(<span class="function"><span class="keyword">function</span> (<span class="params"><span class="variable">$item</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$item</span>[<span class="string">&#x27;post&#x27;</span>];</span><br><span class="line">&#125;, <span class="variable">$data</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//写入文件</span></span><br><span class="line"><span class="variable">$handle</span> = <span class="title function_ invoke__">fopen</span>(<span class="string">&#x27;2.php&#x27;</span>,<span class="string">&#x27;w&#x27;</span>);</span><br><span class="line"><span class="variable">$str</span> = <span class="string">&quot;&lt;?php\n&quot;</span>.<span class="title function_ invoke__">var_export</span>(<span class="variable">$data</span>, <span class="literal">true</span>).<span class="string">&quot;;&quot;</span>;</span><br><span class="line"><span class="title function_ invoke__">fwrite</span>(<span class="variable">$handle</span>,<span class="variable">$str</span>);</span><br><span class="line"><span class="title function_ invoke__">fclose</span>(<span class="variable">$handle</span>);</span><br></pre></td></tr></table></figure><blockquote><p>稍等几秒后，你就可以看到文件目录下多出个 2.php 的文件了，里面有数据代表采集成功~</p></blockquote><h2 id="5-写入数据库"><a href="#5-写入数据库" class="headerlink" title="5. 写入数据库"></a>5. 写入数据库</h2><p>把采集到的内容写入到数据库里</p><h3 id="1-创建表"><a href="#1-创建表" class="headerlink" title="1. 创建表"></a>1. 创建表</h3><p>首先我们创建一张 posts表并有以下字段：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`title`, `review`, `comment`, `content`,`created_at`,`updated_at`</span><br></pre></td></tr></table></figure><blockquote><p>created_at  和 updated_at 建议不要强制为时间类型和必填，否则需要再处理以下数据</p></blockquote><h3 id="2-操作"><a href="#2-操作" class="headerlink" title="2.操作"></a>2.操作</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">set_time_limit</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">require</span> <span class="string">&#x27;../vendor/autoload.php&#x27;</span>;</span><br><span class="line"><span class="variable">$rules</span> = [</span><br><span class="line">    <span class="string">&#x27;title&#x27;</span> =&gt; [<span class="string">&#x27;span.topic-title&#x27;</span>, <span class="string">&#x27;text&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;link&#x27;</span> =&gt; [<span class="string">&#x27;a.topic-title-wrap&#x27;</span>, <span class="string">&#x27;href&#x27;</span>]</span><br><span class="line">];</span><br><span class="line"><span class="variable">$url</span> = <span class="string">&quot;https://learnku.com/laravel&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$client</span> = <span class="keyword">new</span> \App\Handle\<span class="title function_ invoke__">ClientHandle</span>();</span><br><span class="line"><span class="variable">$data</span> = <span class="variable">$client</span>-&gt;<span class="title function_ invoke__">queryBody</span>(<span class="variable">$url</span>, <span class="variable">$rules</span>);</span><br><span class="line"><span class="variable">$data</span> = <span class="title function_ invoke__">array_map</span>(<span class="function"><span class="keyword">function</span> (<span class="params"><span class="variable">$item</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$item</span>[<span class="string">&#x27;post&#x27;</span>];</span><br><span class="line">&#125;, <span class="variable">$data</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//编写sql语句</span></span><br><span class="line"><span class="variable">$sql</span> = <span class="string">&quot;INSERT INTO `posts`(`title`, `review`, `comment`, `content`,`created_at`,`updated_at`) VALUES&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//再过滤下没有匹配到符合条件的特殊数据，避免入库的时候麻烦</span></span><br><span class="line"><span class="variable">$data</span> = <span class="title function_ invoke__">array_filter</span>(<span class="variable">$data</span>,<span class="function"><span class="keyword">function</span>(<span class="params"><span class="variable">$item</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">count</span>(<span class="variable">$item</span>) == <span class="number">6</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//重置数组下标</span></span><br><span class="line"><span class="title function_ invoke__">sort</span>(<span class="variable">$data</span>);</span><br><span class="line"><span class="comment">//组合sql语句</span></span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$data</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$item</span>) &#123;</span><br><span class="line">  <span class="comment">//内容是有html标签的，所以我们要用 base64 处理下才能入库</span></span><br><span class="line">    <span class="variable">$item</span>[<span class="string">&#x27;content&#x27;</span>] = <span class="title function_ invoke__">base64_encode</span>(<span class="variable">$item</span>[<span class="string">&#x27;content&#x27;</span>]);</span><br><span class="line">    <span class="variable">$value</span> = <span class="string">&quot;&#x27;&quot;</span> . <span class="title function_ invoke__">implode</span>(<span class="string">&quot;&#x27;,&#x27;&quot;</span>, <span class="title function_ invoke__">array_values</span>(<span class="variable">$item</span>)) . <span class="string">&quot;&#x27;&quot;</span>;</span><br><span class="line">    <span class="variable">$sql</span> .= <span class="string">&quot;(<span class="subst">$value</span>)&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">count</span>(<span class="variable">$data</span>) - <span class="number">1</span> != <span class="variable">$key</span>) &#123;</span><br><span class="line">        <span class="variable">$sql</span> .= <span class="string">&quot;,&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//采集</span></span><br><span class="line"><span class="variable">$db</span> = <span class="keyword">new</span> \App\Handle\<span class="title function_ invoke__">PdoHandle</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="variable">$db</span>-&gt;source-&gt;<span class="title function_ invoke__">query</span>(<span class="variable">$sql</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;采集入库成功!&#x27;</span>;</span><br><span class="line">&#125; <span class="keyword">catch</span> (PDOException <span class="variable">$exception</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$exception</span>-&gt;<span class="title function_ invoke__">getMessage</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>骚等几秒钟后，你就可以看到网页上输出 ‘采集入库成功’ 的字样，那代表成功了~</p></blockquote><p>我们也可以只采集前几条，只需要重写**$rules**规则就行了</p><p>例如：只取前5条,我们可以这样写。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$rules</span> = [</span><br><span class="line">    <span class="string">&#x27;title&#x27;</span> =&gt; [<span class="string">&#x27;span.topic-title:lt(5)&#x27;</span>, <span class="string">&#x27;text&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;link&#x27;</span> =&gt; [<span class="string">&#x27;a.topic-title-wrap:lt(5)&#x27;</span>, <span class="string">&#x27;href&#x27;</span>]</span><br><span class="line">];</span><br></pre></td></tr></table></figure><h2 id="6-读取数据"><a href="#6-读取数据" class="headerlink" title="6. 读取数据"></a>6. 读取数据</h2><blockquote><p>利用PDO读取数据</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">&#x27;../vendor/autoload.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$db</span> = <span class="keyword">new</span> \App\Handle\<span class="title function_ invoke__">PdoHandle</span>();</span><br><span class="line"><span class="comment">//查询</span></span><br><span class="line"><span class="variable">$sql</span> = <span class="string">&quot;select * from `posts` limit 0,10&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$pdoStatement</span> = <span class="variable">$db</span>-&gt;source-&gt;<span class="title function_ invoke__">query</span>(<span class="variable">$sql</span>);</span><br><span class="line"><span class="variable">$data</span> = <span class="variable">$pdoStatement</span>-&gt;<span class="title function_ invoke__">fetchAll</span>(<span class="title class_">PDO</span>::FETCH_ASSOC);</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$data</span> <span class="keyword">as</span> &amp;<span class="variable">$item</span>)&#123;</span><br><span class="line">  <span class="comment">//给内容解密</span></span><br><span class="line">    <span class="variable">$item</span>[<span class="string">&#x27;content&#x27;</span>] = <span class="title function_ invoke__">base64_decode</span>(<span class="variable">$item</span>[<span class="string">&#x27;content&#x27;</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$data</span>);</span><br></pre></td></tr></table></figure><h1 id="篇尾"><a href="#篇尾" class="headerlink" title="篇尾"></a>篇尾</h1><p>希望对在看的你有点收获吧，同时我也把它上传到了github，需要的伙伴可以拉下来看下。</p><p><a href="https://github.com/NaturalGao/guzzle-caiji">案例</a></p><p><a href="https://naturalgao.github.io/">个人博客</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;​        说到数据采集大家首先都会想到python,代码简洁，高效，很容易就可以实现数据采集。&lt;/p&gt;
&lt;p&gt;​        那P</summary>
      
    
    
    
    
    <category term="PHP" scheme="https://naturalgao.github.io/tags/PHP/"/>
    
    <category term="数据采集" scheme="https://naturalgao.github.io/tags/%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86/"/>
    
  </entry>
  
  <entry>
    <title>成长，就是不断向自己妥协的过程</title>
    <link href="https://naturalgao.github.io/2019/12/13/%E6%88%90%E9%95%BF%EF%BC%8C%E5%B0%B1%E6%98%AF%E4%B8%8D%E6%96%AD%E5%90%91%E8%87%AA%E5%B7%B1%E5%A6%A5%E5%8D%8F%E7%9A%84%E8%BF%87%E7%A8%8B/"/>
    <id>https://naturalgao.github.io/2019/12/13/%E6%88%90%E9%95%BF%EF%BC%8C%E5%B0%B1%E6%98%AF%E4%B8%8D%E6%96%AD%E5%90%91%E8%87%AA%E5%B7%B1%E5%A6%A5%E5%8D%8F%E7%9A%84%E8%BF%87%E7%A8%8B/</id>
    <published>2019-12-13T15:54:39.000Z</published>
    <updated>2022-03-05T16:13:42.768Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>​        在新东家实习已经快一个月了，环境还可以，工作也相对轻松。</p><p>​        公司主要业务是电商SAS平台，开发部门算上我有5个人，3个后端两个前端，我负责后端，算一个比较正规的小团队吧。</p><p>​        实习期间呢，我全力负责SAS平台的三个模块后台的业务开发，分别是素材库、社区（帖子）、商学院（课程）。</p><p>​        这些需求对久经沙场的我来说，自然不在话下，没到一个月就完成了初步的开发，接下来只需要与前端对接完就可以了。</p><h2 id="事情经过"><a href="#事情经过" class="headerlink" title="事情经过"></a>事情经过</h2><p><strong>但是这几天与leader发生了一些摩擦和争执，百般无奈下，我也只好向他妥协。</strong></p><p><strong>主要两个件事：</strong></p><ol><li><p><strong>字段必填</strong></p><p>​        起初的时候我给课程设计了两个字段，一个是课程的开课和结束时间。（后面我仔细看了下需求，并不需要这两个字段）我数据库给这两个字段约束了”必填“ 就是 不能为null。</p><p>​        他可能迁移数据的时候，报了这两个字段没有默认值导致错误了吧~  于是截图给了我，什么也不说。然后我就解释说，这两个字段设置必填才合理，不应该设置默认值。</p><p>​        然后他给我的回应是：必填也要有默认值       （我一头雾水…）    </p></li><li><p><strong>代码冗余</strong></p><p>​        继 ”字段“ 事件后，他也对我写的一个接口进行了审查。 我写的一个 推荐产品的Api接口，可以根据不同的分类，筛选出可选的产品。</p><p>​        举个例子：</p><p>​        产品类型有：商品 和课程</p><p>​        我需要根据这个类型 去对应的表拿可选的数据。后台添加数据的时候也有这个需求，于是我就写在了一个Api，前端和后台都可以共用这个接口。</p><p>​        于是，他就觉得这样不行，要求我拆分开来。 我问他原因呢，他又说不出来，我以为他不了解需求，就不断的向他讲述，最后没有用，结果自然闹得很僵。</p><p>​        我们就这样僵了两三天吧，他就找我谈话了，说要我适应环境，把业务都写在一个Function 里，因为昨天同事看了我的代码，跳来跳去的，看不懂~ ，</p><p>​        我说我可以对我这块业务写个详细的文档，这也不行，无奈下，我也只好妥协。刚来不久，很多东西都不能硬性的去改变，也只能去适应他们的开发方式。</p><p>​        接着，他对我的接口设计又有意见了。社区下的帖子和商学院里的课程都能评论，回复，点赞。</p><p>于是我把这些各自写成一个接口，只需要传参数识别是课程还是帖子就行了。他要求我把这些拆分出来，就是说课程的评论和帖子的评论不能一个接口。百般的解析下,无用，我也只好再一次妥协。</p></li></ol><h2 id="修改后的对比"><a href="#修改后的对比" class="headerlink" title="修改后的对比"></a>修改后的对比</h2><blockquote><p>修改后的代码我真的不想看~ 感觉要被后面的人挖祖坟~~</p></blockquote><p>就简单帖一个创建评论操作的对比吧~</p><h3 id="修改前："><a href="#修改前：" class="headerlink" title="修改前："></a>修改前：</h3><ol><li><h6 id="创建评论操作入口"><a href="#创建评论操作入口" class="headerlink" title="创建评论操作入口"></a>创建评论操作入口</h6></li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建评论</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> CommentRequest $request</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> $id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> mixed</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">createComment</span>(<span class="params">CommentRequest <span class="variable">$request</span>, <span class="variable">$id</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">//获取type，根据typpe 获取对应的query</span></span><br><span class="line">    <span class="variable">$type</span> = <span class="variable">$request</span>-&gt;<span class="title function_ invoke__">input</span>(<span class="string">&#x27;type&#x27;</span>);</span><br><span class="line">    <span class="variable">$query</span> = <span class="title class_">BaseModel</span>::<span class="title function_ invoke__">getQuery</span>(<span class="variable">$type</span>);</span><br><span class="line">    <span class="variable">$data</span> = <span class="variable">$request</span>-&gt;<span class="title function_ invoke__">except</span>(<span class="string">&#x27;type&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//检查对象是否存在</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="variable">$object</span> = <span class="variable">$query</span>-&gt;<span class="title function_ invoke__">findOrFail</span>(<span class="variable">$id</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ModelNotFoundException <span class="variable">$exception</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">failed</span>(<span class="string">&#x27;对象不存在&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">//把对象和数据传到创建评论操作 createCommentHandle</span></span><br><span class="line">        <span class="title class_">NewRetailCommonComment</span>::<span class="title function_ invoke__">createCommentHandle</span>(<span class="variable">$object</span>, <span class="variable">$data</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">success</span>(<span class="string">&#x27;评论成功&#x27;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (\<span class="built_in">Exception</span> <span class="variable">$exception</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">failed</span>(<span class="variable">$exception</span>-&gt;<span class="title function_ invoke__">getMessage</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>CommentRequest.php</li></ol><blockquote><p>Request 中传个类型和内容</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">App</span>\<span class="title class_">Http</span>\<span class="title class_">Requests</span>\<span class="title class_">Api</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Foundation</span>\<span class="title">Http</span>\<span class="title">FormRequest</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CommentRequest</span> <span class="keyword">extends</span> <span class="title">FormRequest</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Determine if the user is authorized to make this request.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> bool</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">authorize</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Get the validation rules that apply to the request.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> array</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">rules</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> [</span><br><span class="line">            <span class="string">&#x27;type&#x27;</span> =&gt; <span class="string">&#x27;required|in:post,course&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;content&#x27;</span> =&gt; <span class="string">&#x27;required|min:1&#x27;</span></span><br><span class="line">        ];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="3"><li>BaseModel.php</li></ol><blockquote><p>根据类型获取不同的实例</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取不同的$Query</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> $type</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> bool|\Illuminate\Database\Eloquent\Builder</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getQuery</span>(<span class="params"><span class="variable">$type</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (<span class="variable">$type</span>):</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;post&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="title class_">NewRetailCommunityPost</span>::<span class="title function_ invoke__">query</span>();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;course&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="title class_">NewRetailCourse</span>::<span class="title function_ invoke__">query</span>();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;comment&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="title class_">NewRetailCommonComment</span>::<span class="title function_ invoke__">query</span>();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;replies&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="title class_">NewRetailCommonCommentReplies</span>::<span class="title function_ invoke__">query</span>();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">endswitch</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>NewRetailCommonComment.php</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 添加评论处理操作</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> $object</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> $data</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> bool</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> \Exception</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">createCommentHandle</span>(<span class="params"><span class="variable">$object</span>, <span class="variable">$data</span></span>): <span class="title">bool</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">//判断对象的类型 获取实例</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$object</span> <span class="keyword">instanceof</span> NewretailCommunityPost) &#123;</span><br><span class="line">        <span class="variable">$model</span> = <span class="keyword">new</span> <span class="title class_">NewretailCommunityPost</span>();</span><br><span class="line">    &#125; <span class="keyword">elseif</span> (<span class="variable">$object</span> <span class="keyword">instanceof</span> NewRetailCourse) &#123;</span><br><span class="line">        <span class="variable">$model</span> = <span class="keyword">new</span> <span class="title class_">NewRetailCourse</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//判断对象是否有效</span></span><br><span class="line">    <span class="variable">$model</span>::<span class="title function_ invoke__">isEffective</span>(<span class="variable">$object</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//评论功能是否开启</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable">$model</span>::<span class="title function_ invoke__">isComment</span>()) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">\Exception</span>(<span class="string">&#x27;评论功能还没有开启哦~~&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//是否需要审核</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable">$model</span>::<span class="title function_ invoke__">commentIsReview</span>()) &#123;</span><br><span class="line">        <span class="variable">$data</span>[<span class="string">&#x27;status&#x27;</span>] = <span class="title class_">CommunityPostEnum</span>::ONE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//返回创建所需的共用数据</span></span><br><span class="line">    <span class="variable">$uuidAndCustomer</span> = <span class="title class_">BaseModel</span>::<span class="title function_ invoke__">getCustomerAndUuid</span>();</span><br><span class="line">  <span class="comment">//数组合并</span></span><br><span class="line">    <span class="variable">$data</span> = <span class="title function_ invoke__">array_merge</span>(<span class="variable">$data</span>, <span class="variable">$uuidAndCustomer</span>);</span><br><span class="line">  <span class="comment">//创建评论</span></span><br><span class="line">    <span class="variable">$object</span>-&gt;<span class="title function_ invoke__">comment</span>()-&gt;<span class="title function_ invoke__">save</span>(<span class="keyword">new</span> <span class="title class_">NewRetailCommonComment</span>(<span class="variable">$data</span>));</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="修改后："><a href="#修改后：" class="headerlink" title="修改后："></a>修改后：</h3><blockquote><p>修改后的话，就是全部放一个Function里。实在没眼看~~</p></blockquote><ol><li>入口（创建文章评论）</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建评论</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> CommentRequest $request</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> NewRetailCommunityPost $post</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> mixed</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">createComment</span>(<span class="params">CommentRequest <span class="variable">$request</span>, NewRetailCommunityPost <span class="variable">$post</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$data</span> = <span class="variable">$request</span>-&gt;<span class="title function_ invoke__">all</span>();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="title class_">NewRetailCommonComment</span>::<span class="title function_ invoke__">createPostComment</span>(<span class="variable">$data</span>, <span class="variable">$post</span>);</span><br><span class="line">       <span class="keyword">return</span> <span class="variable language_">$this</span>&gt;<span class="title function_ invoke__">success</span>(<span class="title class_">ErrorCodeEnum</span>::RETURN_ERROR_CODE_MSG[<span class="title class_">ErrorCodeEnum</span>::ACTION_SUCCESS]);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (\<span class="built_in">Exception</span> <span class="variable">$exception</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">failed</span>(<span class="variable">$exception</span>-&gt;<span class="title function_ invoke__">getMessage</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>NewRetailCommonComment.php</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建文章评论</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> $data</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> $post</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> bool</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> \Exception</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">createPostComment</span>(<span class="params"><span class="variable">$data</span>, <span class="variable">$post</span></span>): <span class="title">bool</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$model</span> = <span class="keyword">new</span> <span class="title class_">NewretailCommunityPost</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$post</span>-&gt;is_del</span><br><span class="line">        || <span class="variable">$post</span>-&gt;status != <span class="title class_">CommunityPostEnum</span>::ONE</span><br><span class="line">        || <span class="title class_">Auth</span>::<span class="title function_ invoke__">user</span>()-&gt;customer_code != <span class="variable">$post</span>-&gt;customer_code) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">\Exception</span>(<span class="title class_">ErrorCodeEnum</span>::RETURN_ERROR_CODE_MSG[<span class="title class_">ErrorCodeEnum</span>::POST_NO_FOUND]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断是否可以评论</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable">$model</span>::<span class="title function_ invoke__">isComment</span>()) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">\Exception</span>(<span class="title class_">ErrorCodeEnum</span>::RETURN_ERROR_CODE_MSG[<span class="title class_">ErrorCodeEnum</span>::NO_OPEN_COMMENT_PERMISSION]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断是否需要审核</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable">$model</span>::<span class="title function_ invoke__">commentIsReview</span>()) &#123;</span><br><span class="line">        <span class="variable">$data</span>[<span class="string">&#x27;status&#x27;</span>] = <span class="title class_">CommunityPostEnum</span>::ONE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$user</span> = <span class="title class_">Auth</span>::<span class="title function_ invoke__">user</span>();</span><br><span class="line">    <span class="variable">$data</span> = <span class="title function_ invoke__">array_merge</span>(<span class="variable">$data</span>, [</span><br><span class="line">        <span class="string">&#x27;customer_code&#x27;</span> =&gt; <span class="variable">$user</span>-&gt;customer_code,</span><br><span class="line">        <span class="string">&#x27;uuid&#x27;</span> =&gt; <span class="variable">$user</span>-&gt;uuid</span><br><span class="line">    ]);</span><br><span class="line">    <span class="variable">$post</span>-&gt;<span class="title function_ invoke__">comment</span>()-&gt;<span class="title function_ invoke__">save</span>(<span class="keyword">new</span> <span class="title class_">NewRetailCommonComment</span>(<span class="variable">$data</span>));</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>创建课程评论 又需要 重新差不多的代码~~~</p></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>​    我发这篇文章的本意并不是如何的抬高自己，贬低别人，我也不认为自己写得有多好，写一些业务代码，没什么值得骄傲的。通过这件事，我领悟到了，有时候有些事情，就算你很不喜欢，很不乐意，为了生活，也得适当的妥协。成长，就是不断向自己妥协的过程。</p><blockquote><p>这种环境并不是我向往的，但是生活所迫，暂时任性不了，我还是会保持我的个性。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h2&gt;&lt;p&gt;​        在新东家实习已经快一个月了，环境还可以，工作也相对轻松。&lt;/p&gt;
&lt;p&gt;​        公司主要业务是电商SAS平台，开</summary>
      
    
    
    
    
    <category term="PHP" scheme="https://naturalgao.github.io/tags/PHP/"/>
    
    <category term="Laravel" scheme="https://naturalgao.github.io/tags/Laravel/"/>
    
    <category term="生活" scheme="https://naturalgao.github.io/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>推荐一个Laravel-admin 表单字段关联的包</title>
    <link href="https://naturalgao.github.io/2019/12/08/%E6%8E%A8%E8%8D%90%E4%B8%80%E4%B8%AALaravel-admin-%E8%A1%A8%E5%8D%95%E5%AD%97%E6%AE%B5%E5%85%B3%E8%81%94%E7%9A%84%E5%8C%85/"/>
    <id>https://naturalgao.github.io/2019/12/08/%E6%8E%A8%E8%8D%90%E4%B8%80%E4%B8%AALaravel-admin-%E8%A1%A8%E5%8D%95%E5%AD%97%E6%AE%B5%E5%85%B3%E8%81%94%E7%9A%84%E5%8C%85/</id>
    <published>2019-12-08T06:09:38.000Z</published>
    <updated>2022-03-05T16:13:42.875Z</updated>
    
    <content type="html"><![CDATA[<p>​        相信有用Laravel 开发web应用的伙伴都有用过Larave-admin。</p><p>​        笔者最近遇到了个需求，需要根据表单的某个组件控制其它组件显示或者隐藏。</p><p>​                例如：</p><p>​                        有一个类型radio的组件，选项有官方，和教师。</p><p>​                        还有一个是教师的select组件。</p><p>​                        我们需要根据类型radio组件的状态来控制教师的select组件。</p><p><img src="/images/02/Snipaste_2019-12-08_15-07-26.png" alt="image-20191208143100238"></p><p>​        那如何实现呢？我翻遍了官方文档，发现并没有提供这一功能。于是我想着要不自己写一个扩展，在写之前我在网上找了各种包，发现了个非常好用的包，嘻嘻~~~</p><p>​        最终效果：</p><p><img src="/images/02/gifhome_544x960_5s.gif" alt="gifhome_544x960_5s"></p><p>​        </p><p>​        向提供者致敬，<a href="https://github.com/zuweie/FieldInteraction">传送门</a></p><p>​        传送门有详细的使用介绍，这里我就不做教程了，希望对在看的你有帮助。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;​        相信有用Laravel 开发web应用的伙伴都有用过Larave-admin。&lt;/p&gt;
&lt;p&gt;​        笔者最近遇到了个需求，需要根据表单的某个组件控制其它组件显示或者隐藏。&lt;/p&gt;
&lt;p&gt;​                例如：&lt;/p&gt;
&lt;p&gt;​</summary>
      
    
    
    
    
    <category term="Laravel" scheme="https://naturalgao.github.io/tags/Laravel/"/>
    
    <category term="Laravel-Admin" scheme="https://naturalgao.github.io/tags/Laravel-Admin/"/>
    
  </entry>
  
  <entry>
    <title>代码风格配置</title>
    <link href="https://naturalgao.github.io/2019/07/24/%E4%BB%A3%E7%A0%81%E9%A3%8E%E6%A0%BC%E9%85%8D%E7%BD%AE/"/>
    <id>https://naturalgao.github.io/2019/07/24/%E4%BB%A3%E7%A0%81%E9%A3%8E%E6%A0%BC%E9%85%8D%E7%BD%AE/</id>
    <published>2019-07-24T15:13:20.000Z</published>
    <updated>2022-03-05T16:13:42.797Z</updated>
    
    <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>在多人开发协作中，每个人的开发风格都不一样，遵循标准的代码规范有利于多人协作，日后的维护成本也低。</p><h1 id="PHP-CodeSniffer"><a href="#PHP-CodeSniffer" class="headerlink" title="PHP_CodeSniffer"></a>PHP_CodeSniffer</h1><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><p>这是一个代码风格检测工具，包含两个脚本：phpcs和phpcbf</p><blockquote><p>phpcs</p></blockquote><p>检测代码风格</p><blockquote><p>phpcbf</p></blockquote><p>修正代码风格</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer global require &quot;squizlabs/php_codesniffer=*&quot;</span><br></pre></td></tr></table></figure><p>安装完成后会在全局依赖包目录生成phpcbf 和 phpcs 文件</p><blockquote><p>window下 是.bat</p></blockquote><p><img src="/images/01/image-20190724233041850.png" alt="image-20190724233041850"></p><blockquote><p>查看composer全局依赖包路径</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer global config bin-dir --absolute</span><br></pre></td></tr></table></figure><h1 id="PhpStorm"><a href="#PhpStorm" class="headerlink" title="PhpStorm"></a>PhpStorm</h1><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>位置：file-&gt;setting-&gt;Tools-&gt;External Tools</p><blockquote><p>添加 phpcs</p></blockquote><p><img src="/images/01/image-20190724233326358.png" alt="image-20190724233326358"></p><blockquote><p>添加phpcbf</p></blockquote><p><img src="/images/01/image-20190724233429626.png" alt="image-20190724233429626"></p><h2 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h2><p>Program：全局composer依赖包phpcs&#x2F;phpcbf路径</p><p>例如我的安装路径为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/Users/mac/.composer/vendor/bin/phpcs</span><br><span class="line"></span><br><span class="line">Program：/Users/mac/.composer/vendor/bin/phpcs</span><br></pre></td></tr></table></figure><p>Arguments:：是<code>$FileDir$/$FileName$</code></p><p>Working directory：是<code>$ProjectFileDir$</code></p><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><p><img src="/images/01/image-20190724234143661.png" alt="image-20190724234143661"></p><h1 id="git提交时对代码进行检查"><a href="#git提交时对代码进行检查" class="headerlink" title="git提交时对代码进行检查"></a>git提交时对代码进行检查</h1><h2 id="Php-cc"><a href="#Php-cc" class="headerlink" title="Php-cc"></a>Php-cc</h2><p>PHP code check 利用git hook、phplint、phpcs，在code commit的时候对php代码进行语法检测、代码风格检查，如果有问题，不允许提交。<a href="https://github.com/wowo-zZ/php-cc">github</a></p><h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer require zhenggui/php-cc</span><br></pre></td></tr></table></figure><p>安装成功后执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer exec phpcc install</span><br></pre></td></tr></table></figure><p>该命令会检查phplint、phpcs的安装情况，并将git原有的pre-commit钩子备份，再将php-cc的pre-commit钩子拷贝至<code>.git/hooks</code>中。</p><p>这样，在git commit之前，就会执行phplint和phpcs检查待提交的文件，如果不满足要求，则会阻止代码提交。</p><h3 id="开启phplint"><a href="#开启phplint" class="headerlink" title="开启phplint"></a>开启phplint</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer exec -v phpcc config phplint/phpcs true/false</span><br></pre></td></tr></table></figure><p>true开启, false 关闭</p><h3 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer exec -v phpcc remote</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;在多人开发协作中，每个人的开发风格都不一样，遵循标准的代码规范有利于多人协作，日后的维护成本也低。&lt;/p&gt;
&lt;h1 id=&quot;PHP-Code</summary>
      
    
    
    
    
    <category term="其它" scheme="https://naturalgao.github.io/tags/%E5%85%B6%E5%AE%83/"/>
    
  </entry>
  
  <entry>
    <title>PHP正则表达式</title>
    <link href="https://naturalgao.github.io/2019/07/24/PHP%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>https://naturalgao.github.io/2019/07/24/PHP%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</id>
    <published>2019-07-24T05:46:19.000Z</published>
    <updated>2022-03-05T16:13:43.111Z</updated>
    
    <content type="html"><![CDATA[<h1 id="PHP正则表达式"><a href="#PHP正则表达式" class="headerlink" title="PHP正则表达式"></a>PHP正则表达式</h1><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><blockquote><p>作用</p></blockquote><p>分割、查找、匹配、替换字符串</p><blockquote><p>分隔符</p></blockquote><p>正斜线（&#x2F;）、hash符号（#）以及取反符号（~）</p><blockquote><p>通用原子</p></blockquote><ol><li>\d    (0-9)</li><li>\D （除了0-9）</li><li>\w （数字，字母，下划线）</li><li>\W （除了数字，字母，下划线）</li><li>\s （空白符）</li><li>\S （除了空白符）</li></ol><blockquote><p>元字符</p></blockquote><ol><li>.（除了换行符外的任意字符）</li><li>*（匹配前面的单元出现0-n次）</li><li>? （匹配前面的单元出现0-1次）</li><li>^（必须以某个单元开头）</li><li>$ （必须以某个单元结尾）</li><li>+（出现一次或者多次）</li><li>{n} （出现n次）</li><li>{n,} （大于等于n次）</li><li>{n,m} （大于等于n并且小于等于m次）</li><li>[] （集合，[abc]匹配a或者b或者c）</li><li>[^] （取反）</li><li>| （或者）</li><li>[-] （范围）</li></ol><blockquote><p>模式修正符</p></blockquote><ol><li>i</li><li>m</li><li>e</li><li>s</li><li>U</li><li>x</li><li>A</li><li>D</li><li>u</li></ol><h2 id="后向引用"><a href="#后向引用" class="headerlink" title="后向引用"></a>后向引用</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$str = &#x27;&lt;b&gt;abc&lt;/b&gt;&#x27;;</span><br><span class="line">$pattern = &#x27;/&lt;b&gt;(.*)&lt;\/b&gt;/&#x27;;</span><br><span class="line">preg_replace($pattern, &#x27;\\1&#x27;,$str);</span><br></pre></td></tr></table></figure><h2 id="贪婪模式"><a href="#贪婪模式" class="headerlink" title="贪婪模式"></a>贪婪模式</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$str = &#x27;&lt;b&gt;abc&lt;/b&gt;&lt;b&gt;bcd&lt;/b&gt;&#x27;;</span><br><span class="line">$pattern = &#x27;/&lt;b&gt;.* &lt;\/b&gt;/&#x27;;</span><br><span class="line">$preg_replace_all($pattern,&#x27;\\1&#x27;,$str);</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;PHP正则表达式&quot;&gt;&lt;a href=&quot;#PHP正则表达式&quot; class=&quot;headerlink&quot; title=&quot;PHP正则表达式&quot;&gt;&lt;/a&gt;PHP正则表达式&lt;/h1&gt;&lt;h2 id=&quot;基础&quot;&gt;&lt;a href=&quot;#基础&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    
    <category term="PHP" scheme="https://naturalgao.github.io/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>数据库维护命令</title>
    <link href="https://naturalgao.github.io/2019/07/19/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%BB%B4%E6%8A%A4%E5%91%BD%E4%BB%A4/"/>
    <id>https://naturalgao.github.io/2019/07/19/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%BB%B4%E6%8A%A4%E5%91%BD%E4%BB%A4/</id>
    <published>2019-07-19T07:35:36.000Z</published>
    <updated>2022-03-05T16:13:42.851Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><u>数据库维护频率较低，也有很多可视化管理工具，但作为程序员，还是有必要了解下维护数据库表命令的</u></p><p>或者</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RENAME TABLE post to posts;</span><br></pre></td></tr></table></figure><h3 id="修改字符集"><a href="#修改字符集" class="headerlink" title="修改字符集"></a>修改字符集</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE posts charset gbk;</span><br></pre></td></tr></table></figure><h3 id="清空表数据"><a href="#清空表数据" class="headerlink" title="清空表数据"></a>清空表数据</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DELETE FROM posts;</span><br></pre></td></tr></table></figure><blockquote><p>这种方式是一条一条的删除，有点慢.可以使用以下方式</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TRUNCATE posts;</span><br></pre></td></tr></table></figure><h3 id="删除表"><a href="#删除表" class="headerlink" title="删除表"></a>删除表</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DROP TABLE posts;</span><br></pre></td></tr></table></figure><blockquote><p>加条件，判断表是否存在,避免报错。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DROP TABLE if EXISTS posts;</span><br></pre></td></tr></table></figure><h2 id="字段"><a href="#字段" class="headerlink" title="字段"></a>字段</h2><h3 id="修改类型"><a href="#修改类型" class="headerlink" title="修改类型"></a>修改类型</h3><blockquote><p>修改<strong>title</strong>字段为字符串并且不能为空</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE posts MODIFY title vachar(50) not null;</span><br></pre></td></tr></table></figure><h3 id="修改字段名和类型"><a href="#修改字段名和类型" class="headerlink" title="修改字段名和类型"></a>修改字段名和类型</h3><blockquote><p>将字段<strong>title</strong>修改为<strong>name</strong>，并且修改类型为<strong>char(30) 不能为null</strong></p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE posts CHANGE title name char(30) not null;</span><br></pre></td></tr></table></figure><h3 id="添加字段"><a href="#添加字段" class="headerlink" title="添加字段"></a>添加字段</h3><blockquote><p>添加一个 <strong>content</strong> 字段，类型为 text</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE posts ADD content text;</span><br></pre></td></tr></table></figure><blockquote><p>插入到某个字段后面</p></blockquote><p>插入到<strong>title</strong>的后面</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE posts ADD content text AFTER title;</span><br></pre></td></tr></table></figure><blockquote><p>插入到最前面</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE posts ADD content text first;</span><br></pre></td></tr></table></figure><h3 id="删除字段"><a href="#删除字段" class="headerlink" title="删除字段"></a>删除字段</h3><blockquote><p>删除 <strong>content</strong> 字段</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE posts drop content;</span><br></pre></td></tr></table></figure><h2 id="主键"><a href="#主键" class="headerlink" title="主键"></a>主键</h2><h3 id="移除自增列"><a href="#移除自增列" class="headerlink" title="移除自增列"></a>移除自增列</h3><blockquote><p>移除id自增</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE posts MODIFY id int not null;</span><br></pre></td></tr></table></figure><h3 id="移除主键"><a href="#移除主键" class="headerlink" title="移除主键"></a>移除主键</h3><blockquote><p>要先移除自增列，才可以移除主键成功</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE posts drop PRIMARY key;</span><br></pre></td></tr></table></figure><h3 id="添加主键"><a href="#添加主键" class="headerlink" title="添加主键"></a>添加主键</h3><blockquote><p>添加id主键</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE posts ADD PRIMARY key (id);</span><br></pre></td></tr></table></figure><h3 id="添加自增列"><a href="#添加自增列" class="headerlink" title="添加自增列"></a>添加自增列</h3><blockquote><p>添加id 自增</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE posts MODIFY id int not null AUTO_INCREMENT;</span><br></pre></td></tr></table></figure><h3 id="添加主键和自增列"><a href="#添加主键和自增列" class="headerlink" title="添加主键和自增列"></a>添加主键和自增列</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE posts MODIFY id int not null AUTO_INCREMENT,ADD PRIMARY key (id);</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;&lt;u&gt;数据库维护频率较低，也有很多可视化管理工具，但作为程序员，还是有必要了解下维护数据库表命令的&lt;/u&gt;&lt;/p&gt;
&lt;p&gt;或者&lt;/p&gt;
&lt;f</summary>
      
    
    
    
    
    <category term="Database" scheme="https://naturalgao.github.io/tags/Database/"/>
    
  </entry>
  
  <entry>
    <title>Laravel 事件监听</title>
    <link href="https://naturalgao.github.io/2019/07/15/Laravel%E4%B8%AD%E7%9A%84%E4%BA%8B%E4%BB%B6%E7%9B%91%E5%90%AC/"/>
    <id>https://naturalgao.github.io/2019/07/15/Laravel%E4%B8%AD%E7%9A%84%E4%BA%8B%E4%BB%B6%E7%9B%91%E5%90%AC/</id>
    <published>2019-07-15T07:33:25.000Z</published>
    <updated>2022-03-05T16:13:42.994Z</updated>
    
    <content type="html"><![CDATA[<p>Laravel 框架中的事件监听</p><span id="more"></span><h1 id="1-什么是“事件监听“？"><a href="#1-什么是“事件监听“？" class="headerlink" title="1.什么是“事件监听“？"></a>1.什么是“事件监听“？</h1><p>从字面上就可以看出来，无非就是监听一个事件。</p><h1 id="2-使用场景"><a href="#2-使用场景" class="headerlink" title="2.使用场景"></a>2.使用场景</h1><p>例句一个物流发货的场景：我有个小程序商城，用户下单后需要在后台发货，发完货后我想在微信发送个模块通知提示用户，我想了想用户不登录微信或者把消息提示关闭了，那岂不是不能实时通知用户已经发货了，我决定再加个短信通知用户。有了模块通知，短信通知后我还嫌不够…然后我继续加…. <strong>通常我们会这么写：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">namespace App\Http\Controllers;</span><br><span class="line">use Illuminate\Http\Request;</span><br><span class="line">class OrderController extends Controller</span><br><span class="line">&#123;</span><br><span class="line">    public function sendGoods()</span><br><span class="line">    &#123;</span><br><span class="line">        //@todo:发货逻辑</span><br><span class="line">        //@todo:模块通知逻辑</span><br><span class="line">        //@todo:短信通知逻辑</span><br><span class="line">        //@todo:等等....</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>**这样写不是不可以，但是逻辑功能越来越多，控制器只会变得臃肿起来，后期不便于维护。这时候可能会有人说，那我可以封装起来啊，是的，你可以封装起来，然后就可以用简短的代码来实现。但是实际项目中，会涉及多人开发，这样就不方便了。所以推荐使用laravel自带的“事件监听“… **</p><h1 id="3-使用”事件监听”优化代码"><a href="#3-使用”事件监听”优化代码" class="headerlink" title="3.使用”事件监听”优化代码"></a>3.使用”事件监听”优化代码</h1><p>3.1 打开终端-&gt;切换到项目根目录-&gt;使用artisan命令创建事件监听文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php artisan make:event OrderEvent</span><br></pre></td></tr></table></figure><p>执行完命令，发现 app&#x2F;Events 目录下多了个 OrderEvent.php 文件</p><p><img src="https://cdn.learnku.com/uploads/images/201905/11/29780/xNg7jaQ9Jr.png!large" alt="记录下学习笔记（Laravel 中的事件监听）"></p><p>我们可以打开看看… </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">namespace App\Events;</span><br><span class="line"></span><br><span class="line">use Illuminate\Broadcasting\Channel;</span><br><span class="line">use Illuminate\Queue\SerializesModels;</span><br><span class="line">use Illuminate\Broadcasting\PrivateChannel;</span><br><span class="line">use Illuminate\Broadcasting\PresenceChannel;</span><br><span class="line">use Illuminate\Foundation\Events\Dispatchable;</span><br><span class="line">use Illuminate\Broadcasting\InteractsWithSockets;</span><br><span class="line">use Illuminate\Contracts\Broadcasting\ShouldBroadcast;</span><br><span class="line"></span><br><span class="line">class OrderEvent</span><br><span class="line">&#123;</span><br><span class="line">    use Dispatchable, InteractsWithSockets, SerializesModels;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Create a new event instance.</span><br><span class="line">     *</span><br><span class="line">     * @return void</span><br><span class="line">     */</span><br><span class="line">    public function __construct()</span><br><span class="line">    &#123;</span><br><span class="line">        //</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Get the channels the event should broadcast on.</span><br><span class="line">     *</span><br><span class="line">     * @return \Illuminate\Broadcasting\Channel|array</span><br><span class="line">     */</span><br><span class="line">    public function broadcastOn()</span><br><span class="line">    &#123;</span><br><span class="line">        return new PrivateChannel(&#x27;channel-name&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>简单的修改下构造函数，因为到时候我们可能会 传入 购买商品的 用户</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">namespace App\Events;</span><br><span class="line"></span><br><span class="line">use App\User;</span><br><span class="line">use Illuminate\Broadcasting\Channel;</span><br><span class="line">use Illuminate\Queue\SerializesModels;</span><br><span class="line">use Illuminate\Broadcasting\PrivateChannel;</span><br><span class="line">use Illuminate\Broadcasting\PresenceChannel;</span><br><span class="line">use Illuminate\Foundation\Events\Dispatchable;</span><br><span class="line">use Illuminate\Broadcasting\InteractsWithSockets;</span><br><span class="line">use Illuminate\Contracts\Broadcasting\ShouldBroadcast;</span><br><span class="line"></span><br><span class="line">class OrderEvent</span><br><span class="line">&#123;</span><br><span class="line">    use Dispatchable, InteractsWithSockets, SerializesModels;</span><br><span class="line"></span><br><span class="line">    public $user;</span><br><span class="line">    /**</span><br><span class="line">     * Create a new event instance.</span><br><span class="line">     *</span><br><span class="line">     * @return void</span><br><span class="line">     */</span><br><span class="line">    public function __construct(User $user)</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;user = $user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Get the channels the event should broadcast on.</span><br><span class="line">     *</span><br><span class="line">     * @return \Illuminate\Broadcasting\Channel|array</span><br><span class="line">     */</span><br><span class="line">    public function broadcastOn()</span><br><span class="line">    &#123;</span><br><span class="line">        return new PrivateChannel(&#x27;channel-name&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>3.2 绑定事件</strong></p><p>打开 app&#x2F;Providers&#x2F;EventServiceProvider.php 文件，找到 成员属性 listen下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">protected $listen = [</span><br><span class="line">    Registered::class =&gt; [</span><br><span class="line">        SendEmailVerificationNotification::class,</span><br><span class="line">    ],</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>把事件关联起来，修改为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">protected $listen = [</span><br><span class="line">    Registered::class =&gt; [</span><br><span class="line">        SendEmailVerificationNotification::class,</span><br><span class="line">    ],</span><br><span class="line">    &#x27;App\Events\OrderEvent&#x27; =&gt; [</span><br><span class="line">        &#x27;App\Listeners\sendModel&#x27;,</span><br><span class="line">        &#x27;App\Listeners\sendPhone&#x27;,</span><br><span class="line">    ]</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>接着打开终端，执行 artisan 命令 生成 监听文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php artisan event:generate</span><br></pre></td></tr></table></figure><p>然后我们可以在 app&#x2F;Listeners 文件下发现多了两个文件</p><p><img src="https://cdn.learnku.com/uploads/images/201905/11/29780/O8o5oDy5J3.png!large" alt="记录下学习笔记（Laravel 中的事件监听）"></p><p>打开这两个文件，依次修改为：</p><p>sendModel.php:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">namespace App\Listeners;</span><br><span class="line"></span><br><span class="line">use App\Events\OrderEvent;</span><br><span class="line">use Illuminate\Queue\InteractsWithQueue;</span><br><span class="line">use Illuminate\Contracts\Queue\ShouldQueue;</span><br><span class="line"></span><br><span class="line">class sendModel</span><br><span class="line">&#123;</span><br><span class="line">    /**</span><br><span class="line">     * Create the event listener.</span><br><span class="line">     *</span><br><span class="line">     * @return void</span><br><span class="line">     */</span><br><span class="line">    public function __construct()</span><br><span class="line">    &#123;</span><br><span class="line">        //</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Handle the event.</span><br><span class="line">     *</span><br><span class="line">     * @param  OrderEvent  $event</span><br><span class="line">     * @return void</span><br><span class="line">     */</span><br><span class="line">    public function handle(OrderEvent $event)</span><br><span class="line">    &#123;</span><br><span class="line">        $user = $event-&gt;user; // @todo: 当前用户</span><br><span class="line">        //@todo：发送消息模板逻辑</span><br><span class="line">        dump(&#x27;发送消息模板成功&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>sendPhone.php:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">namespace App\Listeners;</span><br><span class="line"></span><br><span class="line">use App\Events\OrderEvent;</span><br><span class="line">use Illuminate\Queue\InteractsWithQueue;</span><br><span class="line">use Illuminate\Contracts\Queue\ShouldQueue;</span><br><span class="line"></span><br><span class="line">class sendPhone</span><br><span class="line">&#123;</span><br><span class="line">    /**</span><br><span class="line">     * Create the event listener.</span><br><span class="line">     *</span><br><span class="line">     * @return void</span><br><span class="line">     */</span><br><span class="line">    public function __construct()</span><br><span class="line">    &#123;</span><br><span class="line">        //</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Handle the event.</span><br><span class="line">     *</span><br><span class="line">     * @param  OrderEvent  $event</span><br><span class="line">     * @return void</span><br><span class="line">     */</span><br><span class="line">    public function handle(OrderEvent $event)</span><br><span class="line">    &#123;</span><br><span class="line">        $user = $event-&gt;user; // @todo: 当前用户</span><br><span class="line">        //@todo：发送短信消息</span><br><span class="line">        dump(&#x27;发送短信消息成功&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>3.3 最后我们再打开 OrderController.php 修改为:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">namespace App\Http\Controllers;</span><br><span class="line">use App\Events\OrderEvent;</span><br><span class="line">use App\User;</span><br><span class="line">use Illuminate\Http\Request;</span><br><span class="line">class OrderController extends Controller</span><br><span class="line">&#123;</span><br><span class="line">    public function sendGoods()</span><br><span class="line">    &#123;</span><br><span class="line">        $user = User::find(1);</span><br><span class="line">        //@todo:发货逻辑</span><br><span class="line">        dump(&#x27;发货成功!!&#x27;);</span><br><span class="line">        event(new OrderEvent($user));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>3.4 绑定路由</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Route::get(&#x27;/sendGoods&#x27;,&#x27;OrderController@sendGoods&#x27;);</span><br></pre></td></tr></table></figure><p>3.5 访问路由结果：</p><p><img src="https://cdn.learnku.com/uploads/images/201905/11/29780/acd0gtE61w.png!large" alt="记录下学习笔记（Laravel 中的事件监听）"></p><h1 id="4-总结"><a href="#4-总结" class="headerlink" title="4. 总结"></a>4. 总结</h1><p>这样是不是简单，便于维护了许多呢… 还不会的小伙伴赶紧去试试吧！如果对你有帮助，请给个赞，谢谢！</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Laravel 框架中的事件监听&lt;/p&gt;</summary>
    
    
    
    
    <category term="PHP" scheme="https://naturalgao.github.io/tags/PHP/"/>
    
    <category term="Laravel" scheme="https://naturalgao.github.io/tags/Laravel/"/>
    
  </entry>
  
  <entry>
    <title>Git常用命令</title>
    <link href="https://naturalgao.github.io/2019/07/15/Git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>https://naturalgao.github.io/2019/07/15/Git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</id>
    <published>2019-07-15T05:08:58.000Z</published>
    <updated>2022-03-05T16:13:42.964Z</updated>
    
    <content type="html"><![CDATA[<p>git 版本控制 常用的命令</p><span id="more"></span><h4 id="版本号"><a href="#版本号" class="headerlink" title="版本号"></a>版本号</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git --version</span><br></pre></td></tr></table></figure><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><blockquote><p>配置文件 为    <strong>~&#x2F;.gitconfig（全局）</strong> <strong>.git&#x2F;config （局部）</strong></p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.email &quot;xxxx@qq.com&quot;</span><br><span class="line">git config --global user.name &quot;xxxx&quot;</span><br><span class="line"></span><br><span class="line"># 生成秘钥</span><br><span class="line">ssh-keygen -t rsa -C &quot;xxx@qq.com&quot;</span><br><span class="line"></span><br><span class="line"># 测试</span><br><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>设置默认使用文本编辑器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global core.editor sub1</span><br></pre></td></tr></table></figure><h4 id="alias"><a href="#alias" class="headerlink" title="alias"></a>alias</h4><blockquote><p>取别名，缩减代码</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global alias.c commit</span><br></pre></td></tr></table></figure><h4 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h4><blockquote><h5 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h5></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure><blockquote><h5 id="拉取"><a href="#拉取" class="headerlink" title="拉取"></a>拉取</h5></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/NaturalGao/naturalgao.github.io.git</span><br></pre></td></tr></table></figure><blockquote><h5 id="添加文件"><a href="#添加文件" class="headerlink" title="添加文件"></a>添加文件</h5></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git add .       //添加全部文件</span><br><span class="line">git add a.php   //添加a.php文件</span><br></pre></td></tr></table></figure><blockquote><h5 id="修改文件名"><a href="#修改文件名" class="headerlink" title="修改文件名"></a>修改文件名</h5></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git mv a.php b.php  //修改a.php文件名为b.php</span><br></pre></td></tr></table></figure><blockquote><h5 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h5></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git rm a.txt   //版本库和本地文件都会删除</span><br><span class="line">git rm --cached a.txt //只删除版本库，保留本地</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><h5 id="推送"><a href="#推送" class="headerlink" title="推送"></a>推送</h5></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git commit -m &quot;描述&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><h5 id="查看状态"><a href="#查看状态" class="headerlink" title="查看状态"></a>查看状态</h5></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="忽略文件"><a href="#忽略文件" class="headerlink" title="忽略文件"></a>忽略文件</h4><blockquote><p>文件： .gitignore</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">*.txt     //忽略所有txt文件</span><br><span class="line">/vendor   //忽略vendor文件夹</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h4><blockquote><p>简单描述</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git log</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>查看变动信息</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git log -p</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>最近一次提交</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git log -p -1</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>查看简短信息</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git log --oneline</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>查看变动的文件</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git log --name-only</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>查看类型变化</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git log --name-status</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="修改最新一次提交"><a href="#修改最新一次提交" class="headerlink" title="修改最新一次提交"></a>修改最新一次提交</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git commit --amend</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h4><blockquote><p>查看分支</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git branch</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>创建分支</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git branch dev  //创建 dev分支</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>切换分支</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout dev   //切换到 dev分支</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>创建&amp;&amp;切换分支</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b dev  //创建并且切换到dev分支</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>合并分支</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git merge dev</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>删除分支</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git branch -d dev</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>已合并的分支</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git branch --merged</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>没有合并的分支</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git branch --no-merged</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>删除没有合并的分支</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git branch -D dev</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="暂存区"><a href="#暂存区" class="headerlink" title="暂存区"></a>暂存区</h4><blockquote><p>添加</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git stash</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>查看列表</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git stash list</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>恢复</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git stash apply    //恢复全部</span><br><span class="line">git stash apply stash@&#123;1&#125;  //恢复第一个</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>删除</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git stash pop</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>移除文件</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git reset HEAD a.php  //移除a.php文件</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>恢复文件内容</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout -- a.php</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h4><blockquote><p>添加</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git tab &#x27;标签&#x27;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="生成压缩包"><a href="#生成压缩包" class="headerlink" title="生成压缩包"></a>生成压缩包</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git archive master --prefix = &quot;naturalGao/&quot; --forma=zip &gt; natural.zip</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="移动master分支到最新"><a href="#移动master分支到最新" class="headerlink" title="移动master分支到最新"></a>移动master分支到最新</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git rebase master</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="查看远程分支"><a href="#查看远程分支" class="headerlink" title="查看远程分支"></a>查看远程分支</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git branch -a</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="拉取某个远程分支"><a href="#拉取某个远程分支" class="headerlink" title="拉取某个远程分支"></a>拉取某个远程分支</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git pull origin dev:dev</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="删除远程分支"><a href="#删除远程分支" class="headerlink" title="删除远程分支"></a>删除远程分支</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git push origin --delete dev</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;git 版本控制 常用的命令&lt;/p&gt;</summary>
    
    
    
    <category term="Git" scheme="https://naturalgao.github.io/categories/Git/"/>
    
    
    <category term="Git" scheme="https://naturalgao.github.io/tags/Git/"/>
    
  </entry>
  
</feed>
